"""__author__ = 唐宏进 """

"""
掌握：1.数字(0-255)、字符串(简单的字符串)、布尔值的缓存
      2.垃圾回收机制中的引用计数机制
      
1.python中变量的赋值
python中所有的数据都是对象，所有的变量都是对象的引用
python对数字、字符串和布尔对象进行缓存，让不同的变量赋同样值的这些对象，给的地址是缓存的对象的地址

总结：1.给一个变量赋值的时候，赋的是数字、字符串、布尔值，会在缓存区中看是否有这个值，
      如果有直接将这个值的地址赋给变量。没有就在缓存中开辟空间存储数据，然后返回地址
      2.给一个变量赋值的时候，赋的是除了数字、字符串、布尔以外的值，就在内存中开辟空间存储数据，然后返回地址
一个变量存了一个对象的地址，那么这个变量就是这个对象的引用

2.python中的内存管理
C的内存管理机制：手动
Java\OC\Python等：拥有一套属于自己的自动内存管理机制
a.python通过垃圾回收机制来对内存进行管理的：不定时对程序中的对象进行检测，看是否需要回收（将对象的内存释放），
看是否需要回收就看对象的引用计数是否为0，为0就回收

b.引用计数
python中的每个对象在创建的时候就会有一个属性叫引用计数，其对应的值是0
当对象被引用一次，其引用计数就会加1。当对象的引用减少一个，其引用计数就会减1

3.垃圾回收机制
垃圾回收机制并不是一旦产生引用计数为0的对象就马上回收。
而是不定时的对整个程序用所有的对象进行检测，检测的时候，引用计数为0就回收
当当前程序中所有的对象引用计数变化的次数达到它的阈值的时候，才会对对象进行检测

4.循环引用(python的垃圾回收机制能够自动解决因为循环引用而导致的内存泄漏问题)

"""
from sys import getrefcount
import  gc

# 获取垃圾回收临界值
print(gc.get_threshold())
# 修改垃圾回收临界值
gc.set_threshold(500,10,10)

object1 = [1,2]
object2 = object1
a = [object2, 1]
# 注意：getrefcount函数本身会对查看的对象进行一次引用
print(getrefcount(object1))

num = 1
print(getrefcount(num))

